-- DISCLAIMER --

This is the original concept of the language, preserved for posterity. Implementation details have changed since the writing of this document.

-- DISCLAIMER --

Labra inspired language

The general feel is to use a lot of map/filter/accumulate operations
I also really like the concept of a lazy induction operator
We can use set theory style numbers, but that makes arithmetic really annoying

Types: int, list(lazy)

Operations: (unnecessary ones are marked *)
1
0 *
Addition *
Invert *
Subtraction
Indexing
Prefix *
Induction Operator
Map *
Accumulate
Filter *
Input to this function

Sorted by input number:
0 input: Input, empty list, number
1 input: Flatten/accumulate, Encapsulate, invert
2 input: induction, map, index, add

Notes:
addition can be done with accumulation
Filtering can be done by mapping incorrect things to [] and then flattening
Since inverting only happens to numbers and accumulation only happens to lists, they can be merged
